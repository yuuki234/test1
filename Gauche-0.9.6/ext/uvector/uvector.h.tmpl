///; Process this file with uvgen.scm to generate uvect.c
///; Lines beginning with '///' are directives for ugven.scm.

///;; Header ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
///(define *tmpl-prologue* '(
/*
 * uvector - uniform (homogeneous) numeric vector types (SRFI-4)
 *
 *   Copyright (c) 1999-2007 Shiro Kawai, All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 *
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *   3. Neither the name of the authors nor the names of its contributors
 *      may be used to endorse or promote products derived from this
 *      software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 *   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  This file is automatically generated.  DO NOT EDIT.
 */

#ifndef GAUCHE_UVECT_H
#define GAUCHE_UVECT_H

#include <gauche.h>

SCM_DECL_BEGIN

#if defined(EXTUVECTOR_EXPORTS)
#define LIBGAUCHE_EXT_BODY
#endif
#include <gauche/extern.h>      /* redefine SCM_EXTERN */

/*
 * This header file is for other extension modules which need
 * to access uniform vectors in C level.
 */

SCM_EXTERN ScmObj Scm_UVectorAlias(ScmClass *klass, ScmUVector *v,
                               int start, int end);

SCM_EXTERN ScmObj Scm_UVectorCopy(ScmUVector *v, int start, int end);
SCM_EXTERN ScmObj Scm_UVectorSwapBytes(ScmUVector *v, int option);
SCM_EXTERN ScmObj Scm_UVectorSwapBytesX(ScmUVector *v, int option);

SCM_EXTERN ScmObj Scm_ReadBlockX(ScmUVector *v, ScmPort *port,
                                 int start, int end, ScmSymbol *endian);
SCM_EXTERN ScmObj Scm_WriteBlock(ScmUVector *v, ScmPort *port,
                                 int start, int end, ScmSymbol *endian);

///)) ;; tmpl-prologue

///(define *tmpl-body* '(
/* ${T}Vector */

SCM_EXTERN ScmObj Scm_${T}VectorFill(Scm${T}Vector *vec, ${etype} fill, int, int);
SCM_EXTERN ScmObj Scm_${T}VectorSet(Scm${T}Vector *vec, int index, ScmObj val, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorToList(Scm${T}Vector *vec, int start, int end);
SCM_EXTERN ScmObj Scm_${T}VectorCopy(Scm${T}Vector *vec, int start, int end);
SCM_EXTERN ScmObj Scm_${T}VectorCopyX(Scm${T}Vector *dst, int dstart,
                                      Scm${T}Vector *src, int sstart, int send);
SCM_EXTERN ScmObj Scm_ObjArrayTo${T}Vector(ScmObj *arr, int size, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorToVector(Scm${T}Vector *vec, int start, int end);
SCM_EXTERN ScmObj Scm_VectorTo${T}Vector(ScmVector *vec, int start, int end, int clamp);

/* arithmetics */
SCM_EXTERN ScmObj Scm_${T}VectorAdd(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorAddX(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorSub(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorSubX(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorMul(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorMulX(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorDiv(Scm${T}Vector *s0, ScmObj s1, int clamp);
SCM_EXTERN ScmObj Scm_${T}VectorDivX(Scm${T}Vector *s0, ScmObj s1, int clamp);

SCM_EXTERN ScmObj Scm_${T}VectorAnd(Scm${T}Vector *s0, ScmObj s1);
SCM_EXTERN ScmObj Scm_${T}VectorAndX(Scm${T}Vector *s0, ScmObj s1);
SCM_EXTERN ScmObj Scm_${T}VectorIor(Scm${T}Vector *s0, ScmObj s1);
SCM_EXTERN ScmObj Scm_${T}VectorIorX(Scm${T}Vector *s0, ScmObj s1);
SCM_EXTERN ScmObj Scm_${T}VectorXor(Scm${T}Vector *s0, ScmObj s1);
SCM_EXTERN ScmObj Scm_${T}VectorXorX(Scm${T}Vector *s0, ScmObj s1);

SCM_EXTERN ScmObj Scm_${T}VectorDotProd(Scm${T}Vector *v0, ScmObj v1);
SCM_EXTERN ScmObj Scm_VM${T}VectorDotProd(Scm${T}Vector *v0, ScmObj v1);
SCM_EXTERN ScmObj Scm_${T}VectorRangeCheck(Scm${T}Vector *v0, ScmObj min, ScmObj max);
SCM_EXTERN ScmObj Scm_${T}VectorClamp(Scm${T}Vector *v0, ScmObj min, ScmObj max);
SCM_EXTERN ScmObj Scm_${T}VectorClampX(Scm${T}Vector *v0, ScmObj min, ScmObj max);

SCM_EXTERN ScmObj Scm_${T}VectorSwapBytes(Scm${T}Vector *v0);
SCM_EXTERN ScmObj Scm_${T}VectorSwapBytesX(Scm${T}Vector *v0);

///)) ;; tmpl-body

///(define *tmpl-epilogue* '(

#undef LIBGAUCHE_EXT_BODY

SCM_DECL_END

#endif /* GAUCHE_UVECT_H */

///)) ;; tmpl-epilogue


///; Local variables:
///; mode: c
///; end:
